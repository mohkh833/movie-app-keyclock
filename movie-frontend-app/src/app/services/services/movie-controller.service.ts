/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { deleteMovie } from '../fn/movie-controller/delete-movie';
import { DeleteMovie$Params } from '../fn/movie-controller/delete-movie';
import { findAllMovies } from '../fn/movie-controller/find-all-movies';
import { FindAllMovies$Params } from '../fn/movie-controller/find-all-movies';
import { findMovieById } from '../fn/movie-controller/find-movie-by-id';
import { FindMovieById$Params } from '../fn/movie-controller/find-movie-by-id';
import { MovieResponse } from '../models/movie-response';
import { PageResponseMovieResponse } from '../models/page-response-movie-response';
import { saveMovie } from '../fn/movie-controller/save-movie';
import { SaveMovie$Params } from '../fn/movie-controller/save-movie';
import { searchMovies } from '../fn/movie-controller/search-movies';
import { SearchMovies$Params } from '../fn/movie-controller/search-movies';

@Injectable({ providedIn: 'root' })
export class MovieControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `saveMovie()` */
  static readonly SaveMoviePath = '/movies';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `saveMovie()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  saveMovie$Response(params: SaveMovie$Params, context?: HttpContext): Observable<StrictHttpResponse<MovieResponse>> {
    return saveMovie(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `saveMovie$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  saveMovie(params: SaveMovie$Params, context?: HttpContext): Observable<MovieResponse> {
    return this.saveMovie$Response(params, context).pipe(
      map((r: StrictHttpResponse<MovieResponse>): MovieResponse => r.body)
    );
  }

  /** Path part for operation `findMovieById()` */
  static readonly FindMovieByIdPath = '/movies/{movie-id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findMovieById()` instead.
   *
   * This method doesn't expect any request body.
   */
  findMovieById$Response(params: FindMovieById$Params, context?: HttpContext): Observable<StrictHttpResponse<MovieResponse>> {
    return findMovieById(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findMovieById$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findMovieById(params: FindMovieById$Params, context?: HttpContext): Observable<MovieResponse> {
    return this.findMovieById$Response(params, context).pipe(
      map((r: StrictHttpResponse<MovieResponse>): MovieResponse => r.body)
    );
  }

  /** Path part for operation `deleteMovie()` */
  static readonly DeleteMoviePath = '/movies/{movie-id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteMovie()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteMovie$Response(params: DeleteMovie$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return deleteMovie(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteMovie$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteMovie(params: DeleteMovie$Params, context?: HttpContext): Observable<void> {
    return this.deleteMovie$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `searchMovies()` */
  static readonly SearchMoviesPath = '/movies/search';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `searchMovies()` instead.
   *
   * This method doesn't expect any request body.
   */
  searchMovies$Response(params: SearchMovies$Params, context?: HttpContext): Observable<StrictHttpResponse<PageResponseMovieResponse>> {
    return searchMovies(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `searchMovies$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  searchMovies(params: SearchMovies$Params, context?: HttpContext): Observable<PageResponseMovieResponse> {
    return this.searchMovies$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageResponseMovieResponse>): PageResponseMovieResponse => r.body)
    );
  }

  /** Path part for operation `findAllMovies()` */
  static readonly FindAllMoviesPath = '/movies/';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findAllMovies()` instead.
   *
   * This method doesn't expect any request body.
   */
  findAllMovies$Response(params?: FindAllMovies$Params, context?: HttpContext): Observable<StrictHttpResponse<PageResponseMovieResponse>> {
    return findAllMovies(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findAllMovies$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findAllMovies(params?: FindAllMovies$Params, context?: HttpContext): Observable<PageResponseMovieResponse> {
    return this.findAllMovies$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageResponseMovieResponse>): PageResponseMovieResponse => r.body)
    );
  }

}
